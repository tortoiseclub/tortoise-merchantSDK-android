/**
 * Tortoise Merchant API
 * Tortoise API for merchant to integrate with their existing systems 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: developer@tortoise.pro
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import io.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Cancellation".equalsIgnoreCase(className)) {
      return new TypeToken<List<Cancellation>>(){}.getType();
    }
    
    if ("Customer".equalsIgnoreCase(className)) {
      return new TypeToken<List<Customer>>(){}.getType();
    }
    
    if ("Payment".equalsIgnoreCase(className)) {
      return new TypeToken<List<Payment>>(){}.getType();
    }
    
    if ("Plan".equalsIgnoreCase(className)) {
      return new TypeToken<List<Plan>>(){}.getType();
    }
    
    if ("PlanCustomer".equalsIgnoreCase(className)) {
      return new TypeToken<List<PlanCustomer>>(){}.getType();
    }
    
    if ("PlanProduct".equalsIgnoreCase(className)) {
      return new TypeToken<List<PlanProduct>>(){}.getType();
    }
    
    if ("PlanScheme".equalsIgnoreCase(className)) {
      return new TypeToken<List<PlanScheme>>(){}.getType();
    }
    
    if ("Product".equalsIgnoreCase(className)) {
      return new TypeToken<List<Product>>(){}.getType();
    }
    
    if ("Redemption".equalsIgnoreCase(className)) {
      return new TypeToken<List<Redemption>>(){}.getType();
    }
    
    if ("Scheme".equalsIgnoreCase(className)) {
      return new TypeToken<List<Scheme>>(){}.getType();
    }
    
    if ("SchemeRedemptionOption".equalsIgnoreCase(className)) {
      return new TypeToken<List<SchemeRedemptionOption>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Cancellation".equalsIgnoreCase(className)) {
      return new TypeToken<Cancellation>(){}.getType();
    }
    
    if ("Customer".equalsIgnoreCase(className)) {
      return new TypeToken<Customer>(){}.getType();
    }
    
    if ("Payment".equalsIgnoreCase(className)) {
      return new TypeToken<Payment>(){}.getType();
    }
    
    if ("Plan".equalsIgnoreCase(className)) {
      return new TypeToken<Plan>(){}.getType();
    }
    
    if ("PlanCustomer".equalsIgnoreCase(className)) {
      return new TypeToken<PlanCustomer>(){}.getType();
    }
    
    if ("PlanProduct".equalsIgnoreCase(className)) {
      return new TypeToken<PlanProduct>(){}.getType();
    }
    
    if ("PlanScheme".equalsIgnoreCase(className)) {
      return new TypeToken<PlanScheme>(){}.getType();
    }
    
    if ("Product".equalsIgnoreCase(className)) {
      return new TypeToken<Product>(){}.getType();
    }
    
    if ("Redemption".equalsIgnoreCase(className)) {
      return new TypeToken<Redemption>(){}.getType();
    }
    
    if ("Scheme".equalsIgnoreCase(className)) {
      return new TypeToken<Scheme>(){}.getType();
    }
    
    if ("SchemeRedemptionOption".equalsIgnoreCase(className)) {
      return new TypeToken<SchemeRedemptionOption>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
